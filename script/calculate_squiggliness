import os
import cv2
import math
import numpy as np
import yaml


def load_params(params_path="params.yaml"):
    with open(params_path, "r") as f:
        return yaml.safe_load(f)


def calculate_squiggliness(contour, area_min):
    area = cv2.contourArea(contour)
    perimeter = cv2.arcLength(contour, True)

    if area <= area_min:
        return 0  # ignore tiny noise

    circularity = (4 * math.pi * area) / (perimeter ** 2 + 1e-6)
    squiggliness = (perimeter / area) * (1 / (circularity + 1e-6))
    return squiggliness


def classify_and_highlight_squiggles(input_folder, output_folder, threshold, area_min):
    os.makedirs(output_folder, exist_ok=True)

    for root, _, files in os.walk(input_folder):
        for filename in files:
            if not filename.lower().endswith((".jpg", ".jpeg", ".png")):
                continue

            img_path = os.path.join(root, filename)
            img = cv2.imread(img_path)

            if img is None:
                print(f"⚠️ Could not load {img_path}, skipping.")
                continue

            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
            contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

            for contour in contours:
                score = calculate_squiggliness(contour, area_min)
                if score == 0:
                    continue

                color = (0, 0, 255) if score > threshold else (0, 255, 0)
                thickness = 2 if score > threshold else 1
                cv2.drawContours(img, [contour], -1, color, thickness)

            output_path = os.path.join(output_folder, filename)
            cv2.imwrite(output_path, img)
            print(f"Processed {filename} → saved to {output_path}")


if __name__ == "__main__":
    params = load_params()

    input_folder = params["data"]["input_folder"]
    output_folder = params["data"]["output_folder"]
    threshold = params["squiggliness"]["threshold"]
    area_min = params["squiggliness"]["area_min"]

    classify_and_highlight_squiggles(input_folder, output_folder, threshold, area_min)
